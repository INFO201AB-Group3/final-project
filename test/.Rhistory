subunitwidth = 0.5
)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
#landcolor = toRGB("gray95"),
#subunitcolor = toRGB("gray85"),
#countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot_geo(bydates, lat = ~lat, lon = ~lng) %>%
add_markers(
#text = ~paste(city, " ", state, '<br>', date, "<br>", "killed: ", killed, "injured: ", injured), hoverinfo = "none"
color = ~fatalities, symbol = I('square'), size = I(8)
) %>%
colorbar(title = "shootings") %>%
layout(
title = 'shootings', geo = g
)
library(jsonlite)
library(dplyr)
library(stringr)
library(plotly)
library(jsonlite)
library(dplyr)
library(stringr)
#library(plotly)
library('plotly')
library(jsonlite)
library(dplyr)
library(stringr)
#library(plotly)
#library('plotly')
library(curl)
#library(ggplot2)
#make sure the working directory is correct
setwd("C:/INFO201/a6-mapping-shootings-susancou")
#reads in the shootings database
shootings <- read.csv("data/mass-shooting-data.csv", stringsAsFactors = FALSE)
#checking to see what is in the file
#str(shootings)
#colnames(shootings)
#tells me how many shootingss there ere
incidences <- nrow(shootings)
#adds a fatalities column
shootings <- mutate(shootings, fatalities = killed + injured)  #fatalities is used for both the killed and injured.
#finds the range of dates the csv covers
last.date <-  shootings %>%
slice(1)
first.date <- shootings %>%
slice(incidences)
#groups the information. Takes which column you want to group on
#returns data summarised by group, number of incidents, and the sum of how many were injured and killed.
group.data <- function(my.group){
data <- shootings %>%
group_by_(my.group) %>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
return(data)
}
date.grp.sum <- group.data('date')      #groups by date
cities.grp.sum <- group.data('city')    #groups by city
states.grp.sum <- group.data('state')   #groups by state
#counts rows. takes a dataframe and returns how many rows in DF
howmany <- function(my.df){
rows <- nrow(my.df)
return(rows)
}
date.nrow <- howmany(date.grp.sum)      #counts number of grouped dates
cities.nrow <- howmany(cities.grp.sum)  #counts number of grouped cities
states.nrow <- howmany(states.grp.sum)  #counts number of grouped states
#states.fatal.max <- max.data(shootings)
#finds the incident with the greatest number of people Takes data frame and column
#returns the row with the largest number, minus lat and long.
max.col <- function(my.df, my.col){
col <- as.name(my.col)
max <- my.df %>%
filter(col == max(col))%>%
select(-lat, -lng)
return(max)
}
kill.max.shtg <- max.col(shootings, 'killed')     #finds the most people killed in one incident
ingr.max.shtg <- max.col(shootings, 'injured')    #finds the most people injured in one incident
fata.max.shtg <- max.col(shootings, 'fatalities') #finds the greatest number of fatalities in one incident
#finds the city with the most incidents
city.max.inci <- cities.grp.sum %>%
filter(incidents == max(incidents))
#finds the state with the most incidents
state.max.inci <- states.grp.sum %>%
filter(incidents == max(incidents))
#finds the date with the most incidents
date.max.inci <- date.grp.sum %>%
filter(incidents == max(incidents))
#finds the information about a city. takes city name
#returns all rows about that city
find.city <- function(my.city){
data <- shootings %>%
filter(city == my.city)%>%
select(-lat, -lng)
return(data)
}
chicago <- find.city('Chicago')   #finds information about Chicago
dayton <- find.city('Dayton')     #finds information about Dayton
find.state <- function(my.state){
data <- shootings %>%
filter(state == my.state)
#select(-lat, -lng)
return(data)
}
Ohio <- find.state('Ohio')
california <- find.state('California')
#find the informaiton about the date with the largest number of incidences
July4th <- shootings%>%
filter(date == 'July 4, 2016')
shooting.sums <- shootings %>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
#pretty sure this is a duplicate of info in grp.sum, but it puts it all right here.
chicago.sums <- chicago %>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
July4th.sums <- July4th %>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
Cali.sums <- california%>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
#which include `r colsums$killed` and `r colcums$injured`. `r rows.states` and `r rows.cities `
#where `r chicago.sums$killed` were killed and`r chicigo.sums$injured` were injured.
#The highest rate of incidences are in `r max.incidences`
#Add per day?  Average a week?
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(jsonlite)
library(dplyr)
library(stringr)
library(plotly)
#library('plotly')
library(curl)
library(ggplot2)
#make sure the working directory is correct
setwd("C:/INFO201/a6-mapping-shootings-susancou")
#reads in the shootings database
shootings <- read.csv("data/mass-shooting-data.csv", stringsAsFactors = FALSE)
#checking to see what is in the file
#str(shootings)
#colnames(shootings)
#tells me how many shootingss there ere
incidences <- nrow(shootings)
#adds a fatalities column
shootings <- mutate(shootings, fatalities = killed + injured)  #fatalities is used for both the killed and injured.
#finds the range of dates the csv covers
last.date <-  shootings %>%
slice(1)
first.date <- shootings %>%
slice(incidences)
#groups the information. Takes which column you want to group on
#returns data summarised by group, number of incidents, and the sum of how many were injured and killed.
group.data <- function(my.group){
data <- shootings %>%
group_by_(my.group) %>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
return(data)
}
date.grp.sum <- group.data('date')      #groups by date
cities.grp.sum <- group.data('city')    #groups by city
states.grp.sum <- group.data('state')   #groups by state
#counts rows. takes a dataframe and returns how many rows in DF
howmany <- function(my.df){
rows <- nrow(my.df)
return(rows)
}
date.nrow <- howmany(date.grp.sum)      #counts number of grouped dates
cities.nrow <- howmany(cities.grp.sum)  #counts number of grouped cities
states.nrow <- howmany(states.grp.sum)  #counts number of grouped states
#states.fatal.max <- max.data(shootings)
#finds the incident with the greatest number of people Takes data frame and column
#returns the row with the largest number, minus lat and long.
max.col <- function(my.df, my.col){
col <- as.name(my.col)
max <- my.df %>%
filter(col == max(col))%>%
select(-lat, -lng)
return(max)
}
kill.max.shtg <- max.col(shootings, 'killed')     #finds the most people killed in one incident
ingr.max.shtg <- max.col(shootings, 'injured')    #finds the most people injured in one incident
fata.max.shtg <- max.col(shootings, 'fatalities') #finds the greatest number of fatalities in one incident
#finds the city with the most incidents
city.max.inci <- cities.grp.sum %>%
filter(incidents == max(incidents))
#finds the state with the most incidents
state.max.inci <- states.grp.sum %>%
filter(incidents == max(incidents))
#finds the date with the most incidents
date.max.inci <- date.grp.sum %>%
filter(incidents == max(incidents))
#finds the information about a city. takes city name
#returns all rows about that city
find.city <- function(my.city){
data <- shootings %>%
filter(city == my.city)%>%
select(-lat, -lng)
return(data)
}
chicago <- find.city('Chicago')   #finds information about Chicago
dayton <- find.city('Dayton')     #finds information about Dayton
find.state <- function(my.state){
data <- shootings %>%
filter(state == my.state)
#select(-lat, -lng)
return(data)
}
Ohio <- find.state('Ohio')
california <- find.state('California')
#find the informaiton about the date with the largest number of incidences
July4th <- shootings%>%
filter(date == 'July 4, 2016')
shooting.sums <- shootings %>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
#pretty sure this is a duplicate of info in grp.sum, but it puts it all right here.
chicago.sums <- chicago %>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
July4th.sums <- July4th %>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
Cali.sums <- california%>%
select(killed, injured)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured))
#which include `r colsums$killed` and `r colcums$injured`. `r rows.states` and `r rows.cities `
#where `r chicago.sums$killed` were killed and`r chicigo.sums$injured` were injured.
#The highest rate of incidences are in `r max.incidences`
#Add per day?  Average a week?
View(city.max.inci)
View(city.max.inci)
View(fata.max.shtg)
View(kill.max.shtg)
View(July4th.sums)
View(July4th.sums)
View(July4th)
View(July4th)
library(knitr)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot_geo(bydates, lat = ~lat, lon = ~lng) %>%
add_markers(
text = ~paste(city, " ", state, '<br>', date, "<br>", "killed: ", killed, "injured: ", injured)
color = ~fatalities, symbol = I('square'), size = I(8), hoverinfo = "text"
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot_geo(shootings, lat = ~lat, lon = ~lng) %>%
add_markers(
text = ~paste(city, " ", state, '<br>', date, "<br>", "killed: ", killed, "injured: ", injured),
color = ~fatalities, symbol = I('square'), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "shootings") %>%
layout(
title = 'shootings', geo = g
)
<- list(
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
shooting.map <- plot_geo(shootings, lat = ~lat, lon = ~lng) %>%
add_markers(
text = ~paste(city, " ", state, '<br>', date, "<br>", "killed: ", killed, "injured: ", injured),
color = ~fatalities, symbol = I('open square'), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "number of shootings") %>%
layout(
title = 'Shootings in the USA', geo = g
)
View(shooting.sums)
shooting.sums <- shootings %>%
select(killed, injured, fatalities)%>%
summarise(incidents=n(), killed = sum(killed), injured = sum(injured), fatalities = sum(fatalities))
View(shooting.sums)
View(fata.max.shtg)
View(fata.max.shtg)
View(fata.max.shtg)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
shooting.map <- plot_geo(shootings, lat = ~lat, lon = ~lng) %>%
add_markers(
text = ~paste(city, " ", state, '<br>', date, "<br>", "killed: ", killed, "injured: ", injured),
color = ~fatalities, symbol = I('square-open'), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "number of shootings", len = fata.max.shtg) %>%
layout(
title = 'Shootings in the USA', geo = g
)
bydates <- shootings%>%
tidyr::separate(date, c('m', 'd', 'y'))%>%
group_by(m)%>%
arrange(d)
ggplot(bydates) + geom_line(aes(y=fatalities, x=date, colour = "fatalities"))+
geom_ribbon(aes(ymin=killed, ymax=fatalities, x=date, fill = "band"), alpha = 0.3)+
scale_colour_manual("",values="blue")+
scale_fill_manual("",values="grey12")
View(bydates)
bydates <- shootings%>%
tidyr::separate(date, c('m', 'd', 'y'))%>%
group_by(m)%>%
arrange(d)
ggplot(bydates) + geom_line(aes(y=fatalities, x=date, colour = "fatalities"))+
geom_ribbon(aes(ymin=killed, ymax=fatalities, x=m, fill = "band"), alpha = 0.3)+
scale_colour_manual("",values="blue")+
scale_fill_manual("",values="grey12")
bydates <- shootings%>%
tidyr::separate(date, c('m', 'd', 'y'))%>%
group_by(m)%>%
arrange(d)
ggplot(bydates) + geom_line(aes(y=fatalities, x=date, colour = "fatalities"))+
geom_ribbon(aes(ymin=killed, ymax=fatalities, x="m,d", fill = "band"), alpha = 0.3)+
scale_colour_manual("",values="blue")+
scale_fill_manual("",values="grey12")
ggplot(shootings) + geom_line(aes(y=fatalities, x=date, colour = "fatalities"))+
geom_ribbon(aes(ymin=killed, ymax=fatalities, x=date, fill = "band"), alpha = 0.3)+
scale_colour_manual("",values="blue")+
scale_fill_manual("",values="grey12")
ggplotly()
shiny::runApp('C:/INFO201/downloads/from home/final')
runApp('C:/INFO201/downloads/from home/final')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/appold.R')
runApp('C:/INFO201/downloads/from home/final/appold.R')
runApp('C:/INFO201/downloads/from home/final/appold.R')
runApp('C:/INFO201/downloads/from home/final/appold.R')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
colnames(iris)
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
iris$petal.area <- c(iris$Petal.Length[]* iris$Petal.Width[])
iris$sepal.area <- c(iris$Sepal.Length[]* iris$Sepal.Width[])
iris$petal.area <- c(iris$Petal.Length[]* iris$Petal.Width[])
iris$sepal.area <- c(iris$Sepal.Length[]* iris$Sepal.Width[])
runApp('C:/INFO201/downloads/from home/final/assignment')
View(iris)
View(iris)
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('C:/INFO201/downloads/from home/final/assignment')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
runApp('INFO-201/a8-building-apps-susancou')
shiny::runApp('INFO-201/a8-building-apps-susancou')
setwd("~/INFO-201/final-project/test")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/INFO-201/a8-building-apps-susancou')
data <- read.csv('data/OECD_stats.csv', stringsAsFactors = FALSE)
View(data)
View(data)
runApp()
runApp()
View(data)
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
stats <- read.csv('data/OECD_stats.csv', stringsAsFactors = FALSE)
stats <- na.omit(stats)
filter.one <- function(my.df, var.me, my.filter){
my.filter <- paste(var.me, "==", my.filter)
filtered <- my.df %>% filter_(my.filter)
return(filtered)
}
#different ways of filtering the df
just.year <- filter.one(stats, 'Year.', "'2013'")
just.women <- filter.one(stats, 'Sex', "'Women'")
just.canada <- filter.one(stats, 'Country.', "'Canada'")
just.average <- filter.one(stats, 'Country.', "'OECD - Average'")
just.science <- filter.one(stats, 'Field', "'Science, mathematics and computing'")
just.level <- filter.one(stats, 'Level.of.education', "'Short-cycle tertiary education (ISCED2011 level 5)'")
#aggregates data (many to many)
sexfieldlevelyear <- aggregate( Value ~  Sex + Year. + Level.of.education + Field, data=stats, sum)
sfl.2013 <- aggregate( Value ~  Year. + Sex + Level.of.education + Field, data=just.year, sum)
sfl.wom <- aggregate( Value ~  Sex + Year. + Level.of.education + Field, data=just.women, sum)
sfl.can <- aggregate( Value ~  Sex + Year. + Level.of.education + Field, data=just.canada, sum)
sfl.avg <- aggregate( Value ~ Year. + Sex + Level.of.education + Field, data=just.average, sum)
sfl.sci <- aggregate( Value ~ Field + Sex + Level.of.education + Year., data=just.science, sum)
sfl.level <- aggregate( Value ~ Level.of.education + Sex  +  Field +  Year., data=just.level, sum)
alluvial(sexfieldlevelyear[,1:4], freq=sexfieldlevelyear$Value, alpha=0.8, border= 'black', col= ifelse(sexfieldlevelyear$Sex == 'Women', 'red', 'blue'))
alluvial(sexfieldlevelyear[,1:4], freq=sexfieldlevelyear$Value, alpha=0.8, border= NA, col= ifelse(sexfieldlevelyear$Sex == 'Women', 'red', 'blue'))
alluvial(sfl.2013[,1:4], freq=sfl.2013$Value, alpha=0.8, border= NA, col= ifelse(sfl.2013$Sex == 'Women', 'red', 'blue'))
alluvial(sfl.wom[,1:4], freq=sfl.wom$Value, alpha=0.8, border= NA, col= ifelse(sfl.wom$Sex == 'Women', 'blue', 'red'))
alluvial(sfl.can[,1:4], freq=sfl.can$Value, alpha=0.8, border= NA, col= ifelse(sfl.can$Sex == 'Women', 'red', 'orange'))
alluvial(sfl.avg[,1:4], freq=sfl.avg$Value, alpha=0.8, border= NA, col= ifelse(sfl.avg$Sex == 'Women', 'purple', 'blue'))
alluvial(sfl.sci[,1:4], freq=sfl.sci$Value, alpha=0.8, border= NA, col= ifelse(sfl.sci$Sex == 'Women', 'purple', 'orange'))
alluvial(sfl.level[,1:4], freq=sfl.level$Value, alpha=0.8, border= NA, col= ifelse(sfl.level$Sex == 'Women', 'green', 'yellow'))
runApp()
runApp()
shiny::runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plots <- alluvial(df.agg[,1:4], freq=df.agg$Value, alpha=0.8, col= ifelse(df.agg$Sex == 'Women', 'red', 'blue'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
